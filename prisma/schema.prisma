generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(cuid())
  name      String
  email     String     @unique
  password  String
  role      Role       @default(USER)
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  articles  Article[]
  linktrees Linktree[]

  @@map("users")
}

model Linktree {
  id              String           @id @default(cuid())
  userId          String           @map("user_id")
  photo           String?
  title           String
  slug            String           @unique
  isActive        Boolean          @default(true) @map("is_active")
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  detailLinktrees DetailLinktree[]
  views           LinktreeView[]
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("linktrees")
}

model DetailLinktree {
  id         String      @id @default(cuid())
  linktreeId String      @map("linktree_id")
  categoryId String      @map("category_id")
  title      String
  url        String
  sortOrder  Int         @map("sort_order")
  isVisible  Boolean     @default(true) @map("is_visible")
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @updatedAt @map("updated_at")
  category   Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  linktree   Linktree    @relation(fields: [linktreeId], references: [id], onDelete: Cascade)
  clicks     LinkClick[]

  @@map("detail_linktrees")
}

model Category {
  id              String           @id @default(cuid())
  name            String           @unique
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  icon            String?
  detailLinktrees DetailLinktree[]

  @@map("categories")
}

model LinktreeView {
  id         String   @id @default(cuid())
  linktreeId String   @map("linktree_id")
  ipAddress  String?  @map("ip_address")
  userAgent  String?  @map("user_agent")
  createdAt  DateTime @default(now()) @map("created_at")
  linktree   Linktree @relation(fields: [linktreeId], references: [id], onDelete: Cascade)

  @@map("linktree_views")
}

model LinkClick {
  id               String         @id @default(cuid())
  detailLinktreeId String         @map("detail_linktree_id")
  ipAddress        String?        @map("ip_address")
  userAgent        String?        @map("user_agent")
  referrer         String?
  createdAt        DateTime       @default(now()) @map("created_at")
  detailLinktree   DetailLinktree @relation(fields: [detailLinktreeId], references: [id], onDelete: Cascade)

  @@map("link_clicks")
}

model Article {
  id              String           @id @default(cuid())
  title           String
  slug            String           @unique
  content         String
  excerpt         String?
  featuredImage   String?          @map("featured_image")
  authorId        String           @map("author_id")
  categoryId      String?          @map("category_id")
  status          ArticleStatus    @default(DRAFT)
  metaTitle       String?          @map("meta_title")
  metaDescription String?          @map("meta_description")
  tags            String[]
  readingTime     Int?             @map("reading_time")
  viewCount       Int              @default(0) @map("view_count")
  isFeatured      Boolean          @default(false) @map("is_featured")
  publishedAt     DateTime?        @map("published_at")
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  views           ArticleView[]
  author          User             @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category        ArticleCategory? @relation(fields: [categoryId], references: [id])

  @@map("articles")
}

model ArticleCategory {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  icon        String?
  color       String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  articles    Article[]

  @@map("article_categories")
}

model ArticleView {
  id        String   @id @default(cuid())
  articleId String   @map("article_id")
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  createdAt DateTime @default(now()) @map("created_at")
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@map("article_views")
}

model settings {
  id         String   @id
  key        String   @unique
  value      String
  type       String   @default("string")
  created_at DateTime @default(now())
  updated_at DateTime
}

enum Role {
  ADMIN
  USER
  SUPERADMIN
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}
